---
#@ load("funcs.lib.yml", "slack_hook", "pr_hook")
#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#@ env = data.values.env

#! JOBS

jobs:
  - name: set-pipeline
    plan:
      - get: src
        trigger: true
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
      - get: pipeline-tasks
      - get: general-task
      - task: boot
        image: general-task
        file: pipeline-tasks/tasks/boot.yml
        params:
          ENV_OVERRIDE: ((deploy-env))
      - set_pipeline: self
        file: compiled/set-pipeline.yml
        instance_vars:
          deploy-env: ((deploy-env))

  #@ if/end env == 'staging':
  - name: update-release-branch
    plan:
      - get: src
        trigger: true
      - get: general-task
      - get: pipeline-tasks
      - task: update-release-branch
        image: general-task
        file: pipeline-tasks/tasks/update-release-branch.yml

  - name: test-and-deploy
    plan:
      - get: src
        passed: [set-pipeline]
        trigger: true
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
      - get: nginx
        params:
          format: oci
      - get: node
      - get: node-oci
        resource: node
        params:
          format: oci
      - get: general-task
      - get: pipeline-tasks
      - get: dind
      - in_parallel:
          - task: test-mock
            privileged: true
            image: dind
            file: src/ci/partials/test-mocks.yml
          - task: test-integration
            image: dind
            privileged: true
            params:
              DEDICATED_AWS_ACCESS_KEY_ID: ((dedicated-aws-access-key-id))
              DEDICATED_AWS_SECRET_ACCESS_KEY: ((dedicated-aws-secret-access-key))
            file: src/ci/partials/test-integrations.yml
      - task: build-redirects
        image: node
        file: src/ci/partials/build-redirects.yml
        params:
          SITE_REDIRECTS: ((pages-proxy-((deploy-env))-site-redirects))
      - task: deploy
        image: general-task
        file: src/ci/partials/deploy.yml
        params:
          _: #@ template.replace(data.values.env_cf)
          CF_APP_NAME: pages-proxy-((deploy-env))
          CF_MANIFEST: .cloudgov/manifest.yml
          CF_VARS_FILE: .cloudgov/vars/pages-((deploy-env)).yml
        on_failure:
          try:
            task: cancel-api-deployment
            image: general-task
            file: src/ci/partials/cancel-deployment.yml
            params:
              _: #@ template.replace(data.values.env_cf)
              CF_APP_NAME: pages-proxy-((deploy-env))
    on_failure:
      in_parallel:
        -  #@ slack_hook("failure", "deployment")
        #@ if/end env == 'dev':
        -  #@ pr_hook("failed", "test-and-deploy-proxy")
    on_success:
      in_parallel:
        -  #@ slack_hook("success", "deployment")
        #@ if/end env == 'dev':
        -  #@ pr_hook("success", "test-and-deploy-proxy")

  - name: nightly-tasks
    plan:
      - get: src
        passed: [set-pipeline]
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
      - get: general-task
      - get: pipeline-tasks
      - get: nightly
        trigger: true
      - task: restage
        image: general-task
        file: pipeline-tasks/tasks/restage.yml
        params:
          _: #@ template.replace(data.values.env_cf)
          CF_APP_NAME: pages-proxy-((deploy-env))

  #@ if/end env == 'production':
  - name: release
    plan:
      - get: src
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
        trigger: true
        passed: [test-and-deploy]
      -  #@ template.replace(data.values.release_steps)

#!  RESOURCES

resources:
  #@ if/end env == 'dev':
  - name: src
    type: pull-request
    check_every: 1m
    source:
      repository: ((proxy-repository-path))
      access_token: ((gh-access-token))
      base_branch: main
      disable_forks: true
      ignore_drafts: false

  #@ if/end env == 'staging':
  - name: src
    type: git
    icon: github
    source:
      uri: git@github.com:cloud-gov/pages-proxy.git
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      private_key: ((pages-gpg-operations-github-sshkey.private_key))

  #@ if env == 'production':
  - name: src
    type: git
    icon: github
    source:
      uri: https://github.com/cloud-gov/pages-proxy.git
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      tag_filter: 1.*.*
      fetch_tags: true

  - name: pages-release
    type: github-release
    source:
      owner: cloud-gov
      repository: pages-proxy
      access_token: ((gh-access-token))
    #@ end

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York

  - name: pipeline-tasks
  - name: dind
  - name: nginx
  - name: slack
  - name: node
  - name: general-task

#!  RESOURCE TYPES

resource_types:
  - name: git
  - name: slack-notification
  - name: time
  - name: registry-image
  #@ if/end env == 'dev':
  - name: pull-request
  #@ if/end env == 'production':
  - name: github-release
